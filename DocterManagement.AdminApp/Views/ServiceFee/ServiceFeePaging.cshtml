@using DoctorManagement.Data.Enums
@using DoctorManagement.ViewModels.Common;
@model PagedResult<DoctorManagement.ViewModels.System.AnnualServiceFee.AnnualServiceFeeVm>
@{
    ViewData["Title"] = "ServiceFeePaging";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@section Header{
    <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
        <li class="breadcrumb-item text-sm">
            <a class="opacity-3 text-dark" href="javascript:;">
                <svg width="12px" height="12px" class="mb-1" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                    <title>Bác Sĩ </title>
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#252f40" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                </g>
                            </g>
                        </g>
                    </g>
                </svg>
            </a>
        </li>
        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark">Quản lý thu phí dịch vụ</a></li>
        <li class="breadcrumb-item text-sm text-dark active" aria-current="page">Danh sách thu phí dịch vụ</li>
    </ol>
    <h6 class="font-weight-bolder mb-0">Danh sách thu phí dịch vụ</h6>
}
@section Search{
	<form  asp-action="ServiceFeePaging"  method="get">
		<div class="input-group">
			<button type="submit" class="input-group-text text-body"><i class="fas fa-search" aria-hidden="true"></i></button>
			<input name="keyword" type="text" class="form-control" placeholder="Type here..." value ="@ViewBag.Keyword">
		</div>
	</form>
}
<style>
    
.choices__list--dropdown .choices__item--selectable {
    padding-right: 10px !important;
}
</style>
<div class="container-fluid py-4">
    <div class="row mt-4">
		<div class="col-lg-8">
			<div class="card z-index-2">
				<div class="card-header pb-0">
					<div class="d-lg-flex">
						<div>
							<h5 class="mb-0">Danh sách thu phí dịch vụ</h5>
							<p class="text-sm">
								<i class="fa fa-arrow-up text-success" aria-hidden="true"></i>
							</p>
						</div>
						<div class="col-7 ms-auto my-auto mt-lg-0">
							<div class="row">
										<div class="col-4">
                                            <form  asp-action="ServiceFeePaging" method="get"  class="">
											    <input type="hidden" name="month" value="@ViewBag.Month" />
									            <input type="hidden" name="status" value="@ViewBag.Status"/>
											    <input type="hidden" name="year" value="@ViewBag.Year"/>
											    <input type="hidden" name="check" value="day"/>
                                                <select name="day" id="choices-day" onchange="this.form.submit()" oninvalid="@ViewBag.day" class="form-control" asp-items="ViewBag.Days">
											    </select>
                                                
                                            </form>
										</div>
										<div class="col-4">
                                            <form  asp-action="ServiceFeePaging" method="get"  class="">
											    <input type="hidden" name="check" value="month"/>
									            <input type="hidden" name="status" value="@ViewBag.Status"/>
											    <input type="hidden" name="year" value="@ViewBag.Year"/>
											    <select id="choices-month" name="month"  onchange="this.form.submit()" oninvalid="@ViewBag.Month" class="form-control" asp-items="ViewBag.Months">
											    </select>
                                                
                                            </form>
										</div>
										<div class="col-4">
                                             <form  asp-action="ServiceFeePaging" method="get"  class="">
											    <input type="hidden" name="check" value="year"/>
									            <input type="hidden" name="status" value="@ViewBag.Status"/>
											   
											    <select id="choices-year" name="year"  onchange="this.form.submit()" oninvalid="@ViewBag.Year" class="form-control" asp-items="ViewBag.Years">
											    </select>
                                            </form>
										</div>
									</div>
						</div>
					</div>

				</div>
				<div class="card-body p-3">
					<div class="chart" id="chartget">
						@*<canvas id="chart-line" class="chart-canvas" height="375" width="832"
								style="display: block; box-sizing: border-box; height: 300px; width: 666.2px;">
						</canvas>*@
                        <canvas id="mixed-chart" class="chart-canvas" height="300"></canvas>
					</div>
				</div>
			</div>
		</div>
        <div class="col-lg-4 col-sm-6">
          <div class="card h-100">
            <div class="card-header pb-0 p-3">
              <div class="d-flex justify-content-between">
                <h6 class="mb-0">Thống kê số lượng nộp phí phân loại</h6>
                <button type="button" class="btn btn-rounded btn-outline-secondary mb-0 ms-2 btn-sm d-flex align-items-center justify-content-center" data-bs-toggle="tooltip" data-bs-placement="bottom" title="" >
                  @ViewBag.Count 
                </button>
              </div>
            </div>
            <div class="card-body pb-0 p-3 mt-4">
              <div class="row">
                <div class="col-7 text-start">
                  <div class="chart">
                    <canvas id="chart-pie" class="chart-canvas" height="200"></canvas>
                  </div>
                </div>
                <div class="col-5 my-auto">
                  <span class="badge badge-md badge-dot me-4 d-block text-start">
                    <i class="bg-info"></i>
                    <span class="text-dark text-xs">Đã nộp</span>
                  </span>
                  <span class="badge badge-md badge-dot me-4 d-block text-start">
                    <i class="bg-secondary"></i>
                    <span class="text-dark text-xs">Chưa nộp</span>
                  </span>
                  <span class="badge badge-md badge-dot me-4 d-block text-start">
                    <i class="bg-danger"></i>
                    <span class="text-dark text-xs">Đã hủy</span>
                  </span>
                  <span class="badge badge-md badge-dot me-4 d-block text-start">
                      <i class="bg-dark"></i>
                      <span class="text-dark text-xs">Chờ duyệt</span>
                  </span>
                </div>
              </div>
            </div>
        
          </div>
        </div>
	</div>
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <!-- Card header -->
                <div class="card-header pb-0">
                    <div class="d-lg-flex">
                        <div>
                            <h5 class="mb-0">Danh sách đóng phí</h5>
                            <p class="text-sm mb-0">
                                Phí dịch vụ được tạo mới theo năm.
                            </p>
                        </div>
                        <div class="ms-auto my-auto mt-lg-0 mt-4 col-4">
                           
                            <div class="ms-auto my-auto">
                                 <form  asp-action="ServiceFeePaging" method="get" class="m-4 col-11 d-none d-md-inline-block form-inline ml-0 mr-0 mr-md-3 my-2 my-md-0">
                                    <input type="hidden" name="month" value="@ViewBag.Month" />
									<input type="hidden" name="year" value="@ViewBag.Year"/>
									<input type="hidden" name="day" value="@ViewBag.Day"/>
									<input type="hidden" name="check" value="@ViewBag.Check"/>
                                    <select id ="role" name="status" oninvalid="@ViewBag.Status" class="form-control" onchange="this.form.submit()" asp-items="ViewBag.LStatus" >
                                    </select>
                                </form>
                              @*  <a asp-action="Create" asp-controller="User"  class="btn bg-gradient-info btn-sm mb-0">+&nbsp; Thêm Nhân viên</a>
                                *@
                            </div>
                        </div>
                    </div>
                </div>
                @if (TempData["AlertMessage"] != null)
                {

                    <div id="AlertBox" data-notify="container" class="col-xs-12 col-sm-12 alert @TempData["AlertType"] alert-with-icon hide1" role="alert" data-notify-position="top-center" style="">

                        <span data-notify="title"></span> <span data-notify="message">@TempData["AlertMessage"]</span>
                        <a href="#" target="_blank" data-notify="url"></a>
                    </div>

                    <style>
                        .seachvisble {
                            display: none;
                        }
                    </style>
                }
                <div class="card-body px-0 pb-0">
                    <div class="table-responsive">
                        <table class="table table-flush" id="list">
                            <thead class="thead-light">
                                <tr>
                                    <th>Mã khách hàng</th>
                                    <th>Họ tên</th>
                                    <th>Số điện thoại</th>
                                    <th>E-mail</th>
                                    <th>Trạng thái</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var i = 1;
                                }
                                @foreach (var item in Model.Items)
                                {
                                    <tr id="row_@item.Id">
                                        <td class="text-sm"><h6 class="ms-3 my-auto">@item.Doctor.No</h6></td>
                                        <td class="text-xs font-weight-bold">
                                            <div class="d-flex align-items-center">
                                                <img src="@(item.Doctor.Img.Contains("default") ? @Configuration["BaseAddress"] + "/img/user-content/user_default.png" : @Configuration["BaseAddress"] + "/img/user-content/" + @item.Doctor.Img)" class="avatar avatar-xs me-2" alt="user image">
                                                <span>@item.Doctor.FullName</span>
                                            </div>
                                        </td>
                                        <td class="text-sm"><h6 class="ms-3 my-auto">@item.Doctor.User.PhoneNumber</h6></td>
                                        <td class="text-sm"><h6 class="ms-3 my-auto">@item.Doctor.User.Email</h6></td>
                                        
                                        <td>
                                            <span class="badge 
                                            @(item.Status==StatusAppointment.approved?"badge-dark":
                                                                item.Status==StatusAppointment.cancel?"badge-danger":
                                                                item.Status==StatusAppointment.complete?"badge-success":"badge-warning")
                                            badge-sm" >
                                                @(item.Status==StatusAppointment.approved?"Đợi xử lý":
                                                                item.Status==StatusAppointment.cancel?"Đã hủy":
                                                                item.Status==StatusAppointment.complete?"Đã nộp phí":"Chưa nộp phí")</span>
                                        </td>
                                        <td class="text-sm">
                                            <a asp-controller = "ServiceFee" asp-action = "DetailtServiceFee" asp-route-id = "@item.Id" data-bs-toggle="tooltip" data-bs-original-title="Xem chi tiết">
                                                <i class="fas fa-eye text-secondary"></i>
                                            </a>
                                            @*<a asp-controller = "User" asp-action = "@(item.GetRole.Name.ToUpper() == "DOCTOR" ? "Update" : item.GetRole.Name.ToUpper() == "ADMIN" ? "UpdateAdmin" : "UpdatePatient")" asp-route-id = "@item.Id" class="mx-3" data-bs-toggle="tooltip" data-bs-original-title="sửa">
                                                <i class="fas fa-user-edit text-secondary"></i>
                                            </a>*@
                                            @*<a id = "User_@i" onclick="@(item.Status == Status.Active? "ConfirmStatus("+@i+")": "ConfirmDelete("+@i+")")" data-id="@item.Id" data-bs-toggle="tooltip" data-bs-original-title="Xóa">
                                                <i class="fas fa-trash text-secondary"></i>
                                            </a>*@
                                        </td>
                                    </tr>
                                    i++;
                                }

                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Họ tên</th>
                                    <th>Tài khoản</th>
                                    <th>Số điện thoại</th>
                                    <th>E-mail</th>
                                    <th>Trạng thái</th>
                                    <th>Thao tác</th>
                                </tr>
                            </tfoot>
                        </table>
                        @await Component.InvokeAsync("Pager", Model)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="myModel" onclick="EnableQuesion()" class="swal2-container swal2-center swal2-backdrop-show delete_none" style="overflow-y: auto;">
        <div aria-labelledby="swal2-title" aria-describedby="swal2-html-container" class="swal2-popup swal2-modal swal2-icon-warning swal2-show" tabindex="-1" role="dialog" aria-live="assertive" aria-modal="true" style="display: grid;">
            <div class="swal2-icon swal2-warning swal2-icon-show" style="display: flex;">
                <div class="swal2-icon-content">!</div>
            </div>
            <h2 class="swal2-title" id="swal2-title" style="display: block;">Bạn có chắc không?</h2>
            <div id="quesion" class="swal2-html-container" style="display: block;">Bạn sẽ không thể hoàn nguyên điều này!</div>
            <div class="swal2-actions">
                <div class="swal2-loader"></div>
                <button id="okok" type="button" class="swal2-confirm btn bg-gradient-success" aria-label="" onclick="Delete()" style="display: inline-block;">Có, xóa nó!</button>
                <button type="button" class="swal2-cancel btn bg-gradient-danger" aria-label="" onclick="Enable()" style="display: inline-block;">Hủy bỏ</button>
            </div>
        </div>
    </div>
    <div id="loaderDir" onclick="EnableDel()" class="swal2-container swal2-center swal2-backdrop-show delete_none" style="overflow-y: auto;">
        <div aria-labelledby="swal2-title" aria-describedby="swal2-html-container" class="swal2-popup swal2-modal swal2-icon-success swal2-show" tabindex="-1" role="dialog" aria-live="assertive" aria-modal="true" style="display: grid;">

            <div class="swal2-icon swal2-success swal2-icon-show" style="display: flex;">
                <div class="swal2-success-circular-line-left" style="background-color: rgb(255, 255, 255);"></div>
                <span class="swal2-success-line-tip"></span>
                <span class="swal2-success-line-long"></span>
                <div class="swal2-success-ring"></div> <div class="swal2-success-fix" style="background-color: rgb(255, 255, 255);"></div>
                <div class="swal2-success-circular-line-right" style="background-color: rgb(255, 255, 255);"></div>
            </div>

            <h2 class="swal2-title" id="swal2-title" style="display: block;">
                <font style="vertical-align: inherit;">
                    <font id = "title" style="vertical-align: inherit;">Đã xóa!</font>
                </font>
            </h2>
            <div class="swal2-html-container" style="display: block;">
                <font style="vertical-align: inherit;">
                    <font id = "descript" style="vertical-align: inherit;">Tệp của bạn đã bị xóa.</font>
                </font>
            </div>



            <div class="swal2-actions">
                <div class="swal2-loader"></div>
                <button type="button" onclick="Enable()" class="swal2-confirm swal2-styled" aria-label="" style="display: inline-block;">
                    <font style="vertical-align: inherit;"><font style="vertical-align: inherit;">VÂNG</font></font>
                </button>

            </div>

        </div>
    </div>
    <input type="hidden" id="hiddenEmployeeId" />
     

</div>

@section jsFooter{
    <script>
        if (document.getElementById('role')) {
            var category = document.getElementById('role');
            const example = new Choices(category,{
                searchEnabled: false,
                itemSelectText: 'chọn'
            });
        }
      
    </script>
    <script src="~/js/plugins/datatables.js"></script>
     
    <script>
        if (document.getElementById('list')) {
            const dataTableSearch = new simpleDatatables.DataTable("#list", {
                searchable: false,
                fixedHeight: false,
                paging: false
            });

            document.querySelectorAll(".export").forEach(function (el) {
                el.addEventListener("click", function (e) {
                    var type = el.dataset.type;

                    var data = {
                        type: type,
                        filename: "soft-ui-" + type,
                    };

                    if (type === "csv") {
                        data.columnDelimiter = "|";
                    }

                    dataTableSearch.export(data);
                });
            });
        };
    </script>
    <script>

        var ok = document.getElementById("loaderDir");
        var cel = document.getElementById("myModel");

        var EnableQuesion = function () {
            cel.classList.add("delete_none");
            cel.classList.remove("delete_block");

        }
        var EnableDel = function () {
            ok.classList.add("delete_none");
            ok.classList.remove("delete_block");

        }

        var ConfirmDelete = function (Id) {
            var idUser = $("#User_"+Id).attr("data-id");
            $("#hiddenEmployeeId").val(idUser);
            document.getElementById("myModel").classList.toggle('delete_none');
            document.getElementById("myModel").classList.toggle('delete_block');
            $("#quesion").html("Bạn sẽ không thể hoàn nguyên điều này!");
            $("#okok").html("Có, xóa nó!");
        }
        var ConfirmStatus = function (Id) {
           var idUser = $("#User_"+Id).attr("data-id");
            $("#hiddenEmployeeId").val(idUser);
            document.getElementById("myModel").classList.toggle('delete_none');
            document.getElementById("myModel").classList.toggle('delete_block');
            $("#quesion").html("Bạn có muốn tạm dừng hoạt động tài khoản này?");
            $("#okok").html("Có, ẩn nó!");
        }

        var Delete = function () {


            EnableQuesion();
            

            var empId = $("#hiddenEmployeeId").val();

            $.ajax({
                url: "/User/Delete",
                data: { idUser: empId},
                dataType: "json",
                type: "POST",
                success: function (result) {
                    if (result.response == 2) {
                        $("#row_" + empId).remove();
                          $("#title").html("Xóa Thành Công");
                        $("#descript").html("Xóa người dùng thành công.");
                    } else if(result.response == 1) {
                        document.getElementById("status_" + empId).classList.toggle('badge-success');
                        document.getElementById("status_" + empId).classList.toggle('badge-danger');
                        $("#status_" + empId).html("đã khóa");
                        $("#title").html("Chặn Thành Công");
                        $("#descript").html("Chặn người dùng thành công.");
                    }else{
                        $("#title").html("Lỗi sever!");
                        $("#descript").html("Không thể thực hiện chức năng này.");
                    }

                }
            })

            document.getElementById("loaderDir").classList.toggle('delete_none');
            document.getElementById("loaderDir").classList.toggle('delete_block');
        }
    </script>
    <!-- Kanban scripts -->
    <script src="~/js/plugins/dragula/dragula.min.js"></script>
    <script src="~/js/plugins/jkanban/jkanban.js"></script>

    <script>
        var menu_bd = document.getElementById("menu_acc");
        menu_bd.classList.add("active");
        menu_bd.classList.remove("collapsed");
        var a_acc = document.getElementById("a_service");
        a_acc.classList.add("active");
        var dashboardsExamples = document.getElementById("QUANLYTAIKHOAN");
        dashboardsExamples.classList.add("show");
    </script>

    <script src="~/js/plugins/datatables.js"></script>
<script src="~/js/plugins/chartjs.min.js"></script>
<script>
        
		if (document.getElementById('choices-day')) {
            var element = document.getElementById('choices-day');
            const example = new Choices(element, {
                searchEnabled: true,
                itemSelectText: 'chọn'
            });
        };
        if (document.getElementById('choices-month')) {
            var element = document.getElementById('choices-month');
            const example = new Choices(element, {
                searchEnabled: false,
                itemSelectText: 'chọn'
            });
        };
        if (document.getElementById('choices-year')) {
            var element = document.getElementById('choices-year');
            const example = new Choices(element, {
                searchEnabled: true,
                itemSelectText: 'chọn'
            });
        };
    </script>

<script>
    var ctx2 = document.getElementById("chart-pie").getContext("2d");
    var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
    gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

    var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke2.addColorStop(1, 'rgba(20,23,39,0.2)');
    gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)'); //purple colors


    // Pie chart
    var userindex = @Html.Raw(ViewBag.StatisticPie);
    var labeluser = []; 
    var datauser = [];        

    $.each(userindex, function (index, item) {        
         labeluser.push(item.Text);       
         datauser.push(item.Value) ;      
    }) 
    console.log(labeluser);
    console.log(datauser);
    new Chart(ctx2, {
      type: "pie",
      data: {
        labels:labeluser,
        datasets: [{
          label: "Projects",
          weight: 9,
          cutout: 0,
          tension: 0.9,
          pointRadius: 2,
          borderWidth: 2,
          backgroundColor: ['#17c1e8', '#8392ab', '#ea0606', '#3A416F'],
          data: datauser,
          fill: false
        }],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false,
            },
            ticks: {
              display: false
            }
          },
          x: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false,
            },
            ticks: {
              display: false,
            }
          },
        },
      },
    });
	var dateindex = @Html.Raw(ViewBag.Statitic);
	UserGetMonth(dateindex);

		$("#choices-day").change(function () {
			var day = $(this).val();
			var month = $("#choices-month").val();
			var year = $("#choices-year").val();
			$.get('/Statistic/GetDay?day=' + day + '&month=' + month + '&year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

		$("#choices-month").change(function () {
			var month = $(this).val();
			var year = $("#choices-year").val();
			$.get('/Statistic/GetMonth?month=' + month + '&year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

		$("#choices-year").change(function () {
			var year = $(this).val();
			$.get('/Statistic/GetYear?year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

	function UserGetMonth(resp) {

		$("canvas#chart-bars").remove();
		$("#chartget").html('<canvas id="mixed-chart" class="chart-canvas" height="300"></canvas>');

		var label = [];
		var labelmonth = [];
		var datacount = [];
		var dataview = [];
		var datarating = [];

		$.each(resp, function (index, item) {
			label.push(item.date);
			labelmonth.push(item.month)
			datacount.push(item.count);
			dataview.push(item.amount)
			datarating.push(item.rating)
		})

		console.log(label);
		console.log(labelmonth);
		console.log(datacount);
		console.log(dataview);
		console.log(datarating);

        var ctx2 = document.getElementById("mixed-chart").getContext("2d");

        var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
		gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

		var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke2.addColorStop(1, 'rgba(130,214,22,0.2)');
		gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke2.addColorStop(0, 'rgba(130,214,22,0)'); //purple colors

		var gradientStroke3 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke3.addColorStop(1, 'rgba(39,197,231,0.2)');
		gradientStroke3.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke3.addColorStop(0, 'rgba(39,197,231,0)'); //purple colors
		

		

        new Chart(ctx2, {
          data: {
            labels: label,
            datasets: [
              {
                type: "line",
                label: "Khách Hàng",
                tension: 0.4,
                borderWidth: 0,
                pointRadius: 0,
                pointBackgroundColor: "#cb0c9f",
                borderColor: "#cb0c9f",
                borderWidth: 3,
                backgroundColor: gradientStroke1,
                data: datacount,
                fill: true,
              },{
                type: "bar",
                label: "Tổng tiền(/10tr vnđ)",
                weight: 5,
                tension: 0.4,
                borderWidth: 0,
                pointBackgroundColor: "#82d616",
                borderColor: "#82d616",
                backgroundColor: '#82d616',
                borderRadius: 4,
                borderSkipped: false,
                data: dataview,
                maxBarThickness: 10,
              }
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false,
              }
            },
            interaction: {
              intersect: false,
              mode: 'index',
            },
            scales: {
              y: {
                grid: {
                  drawBorder: false,
                  display: true,
                  drawOnChartArea: true,
                  drawTicks: false,
                  borderDash: [5, 5]
                },
                ticks: {
                  display: true,
                  padding: 10,
                  color: '#b2b9bf',
                  font: {
                    size: 11,
                    family: "Open Sans",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
              x: {
                grid: {
                  drawBorder: false,
                  display: true,
                  drawOnChartArea: true,
                  drawTicks: true,
                  borderDash: [5, 5]
                },
                ticks: {
                  display: true,
                  color: '#b2b9bf',
                  padding: 10,
                  font: {
                    size: 11,
                    family: "Open Sans",
                    style: 'normal',
                    lineHeight: 2
                  },
                }
              },
            },
          },
        });

		
	}






	(function () {
		const container = document.getElementById("globe");
		const canvas = container.getElementsByTagName("canvas")[0];

		const globeRadius = 100;
		const globeWidth = 4098 / 2;
		const globeHeight = 1968 / 2;

		function convertFlatCoordsToSphereCoords(x, y) {
			let latitude = ((x - globeWidth) / globeWidth) * -180;
			let longitude = ((y - globeHeight) / globeHeight) * -90;
			latitude = (latitude * Math.PI) / 180;
			longitude = (longitude * Math.PI) / 180;
			const radius = Math.cos(longitude) * globeRadius;

			return {
				x: Math.cos(latitude) * radius,
				y: Math.sin(longitude) * globeRadius,
				z: Math.sin(latitude) * radius
			};
		}

		function makeMagic(points) {
			const {
				width,
				height
			} = container.getBoundingClientRect();

			// 1. Setup scene
			const scene = new THREE.Scene();
			// 2. Setup camera
			const camera = new THREE.PerspectiveCamera(45, width / height);
			// 3. Setup renderer
			const renderer = new THREE.WebGLRenderer({
				canvas,
				antialias: true
			});
			renderer.setSize(width, height);
			// 4. Add points to canvas
			// - Single geometry to contain all points.
			const mergedGeometry = new THREE.Geometry();
			// - Material that the dots will be made of.
			const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);
			const pointMaterial = new THREE.MeshBasicMaterial({
				color: "#989db5",
			});

			for (let point of points) {
				const {
					x,
					y,
					z
				} = convertFlatCoordsToSphereCoords(
					point.x,
					point.y,
					width,
					height
				);

				if (x && y && z) {
					pointGeometry.translate(x, y, z);
					mergedGeometry.merge(pointGeometry);
					pointGeometry.translate(-x, -y, -z);
				}
			}

			const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);
			scene.add(globeShape);

			container.classList.add("peekaboo");

			// Setup orbital controls
			camera.orbitControls = new THREE.OrbitControls(camera, canvas);
			camera.orbitControls.enableKeys = false;
			camera.orbitControls.enablePan = false;
			camera.orbitControls.enableZoom = false;
			camera.orbitControls.enableDamping = false;
			camera.orbitControls.enableRotate = true;
			camera.orbitControls.autoRotate = true;
			camera.position.z = -265;

			function animate() {
				// orbitControls.autoRotate is enabled so orbitControls.update
				// must be called inside animation loop.
				camera.orbitControls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}
			animate();
		}

		function hasWebGL() {
			const gl =
				canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
			if (gl && gl instanceof WebGLRenderingContext) {
				return true;
			} else {
				return false;
			}
		}

		function init() {
			if (hasWebGL()) {
				window
				window.fetch("https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json")
					.then(response => response.json())
					.then(data => {
						makeMagic(data.points);
					});
			}
		}
		init();
	})();
</script>
@*<script>
    var ctx2 = document.getElementById("chart-line").getContext("2d");

		
new Chart(ctx2, {
			type: "line",
			data: {
				labels: label,
				datasets: [{
					label: "News",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#cb0c9f",
					borderColor: "#cb0c9f",
					borderWidth: 3,
					backgroundColor: gradientStroke1,
					fill: true,
					data: datacount,
					maxBarThickness: 6

				},
				{
					label: "View",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#82d616",
					borderColor: "#82d616",
					borderWidth: 3,
					backgroundColor: gradientStroke2,
					fill: true,
					data: dataview,
					maxBarThickness: 6
					},
				{
					label: "Rating(tr)",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#17c1e8",
					borderColor: "#17c1e8",
					borderWidth: 3,
					backgroundColor: gradientStroke3,
					fill: true,
					data: datarating,
					maxBarThickness: 6
				},
				],
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: false,
					}
				},
				interaction: {
					intersect: false,
					mode: 'index',
				},
				scales: {
					y: {
						grid: {
							drawBorder: false,
							display: true,
							drawOnChartArea: true,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							padding: 10,
							color: '#b2b9bf',
							font: {
								size: 11,
								family: "Open Sans",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
					x: {
						grid: {
							drawBorder: false,
							display: false,
							drawOnChartArea: false,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							color: '#b2b9bf',
							padding: 20,
							font: {
								size: 11,
								family: "Open Sans",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
				},
			},
		});
</script>*@
}
